// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuonRoiSocialNetwork.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MuonRoiSocialNetwork.Migrations
{
    [DbContext(typeof(MuonRoiSocialNetworkDbContext))]
    [Migration("20230807150342_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MuonRoi.Social_Network.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Chapters.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)");

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<long>("NumberOfChapter")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfWord")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoryId")
                        .HasColumnType("integer");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Roles.GroupUserMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("GroupUserMember", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("Img_Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<bool>("IsShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ListRattings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Story_Synopsis")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Story_Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TotalFavorite")
                        .HasColumnType("integer");

                    b.Property<int>("TotalView")
                        .HasColumnType("integer");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Story", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("Img_Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("NotifiUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("NotificationSate")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReadNotificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserGuid");

                    b.ToTable("StoryNotifications", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryPublish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("StoryPublish", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("StoryReview", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.TagInStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<int>("StoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("TagId");

                    b.ToTable("TagInStory", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<int>("CountRequestSendMail")
                        .HasColumnType("integer");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision");

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision");

                    b.Property<string>("Email")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastLoginLocation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LockReason")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Salt")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.BookMarkStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookmarkDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("BookMarkStory", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.FollowingAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("FollowingAuthor", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Groups.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("AppRole", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Storys.StoryFavorite", b =>
                {
                    b.Property<int>("StoryId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnOrder(110);

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(105);

                    b.HasKey("StoryId", "UserGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("StoryFavorite", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Users.UserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<double?>("CreateDateTS")
                        .HasColumnType("double precision");

                    b.Property<string>("KeySalt")
                        .HasColumnType("text");

                    b.Property<double?>("RefreshTokenExpiryTimeTS")
                        .HasColumnType("double precision");

                    b.HasKey("UserId", "RefreshToken");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Chapters.Chapter", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.Story", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Categories.Category", "Category")
                        .WithMany("Storys")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryNotifications", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("StoryNotifications")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryNotifications")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryPublish", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryPublish")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryReview", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryReview")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.TagInStory", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("TagInStory")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuonRoi.Social_Network.Tags.Tag", "Tag")
                        .WithMany("TagInStory")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.AppUser", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Roles.GroupUserMember", "GroupUserMember")
                        .WithMany("UserMember")
                        .HasForeignKey("GroupId");

                    b.Navigation("GroupUserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.BookMarkStory", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("BookMarkStory")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.FollowingAuthor", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("FollowingAuthor")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Storys.StoryFavorite", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("StoryFavorite")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "AppUser")
                        .WithMany("StoryFavorite")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Users.UserLogin", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "AppUser")
                        .WithOne("UserLoggin")
                        .HasForeignKey("MuonRoiSocialNetwork.Domains.DomainObjects.Users.UserLogin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Categories.Category", b =>
                {
                    b.Navigation("Storys");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Roles.GroupUserMember", b =>
                {
                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.Story", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("StoryFavorite");

                    b.Navigation("StoryNotifications");

                    b.Navigation("TagInStory");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.Tag", b =>
                {
                    b.Navigation("TagInStory");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.AppUser", b =>
                {
                    b.Navigation("BookMarkStory");

                    b.Navigation("FollowingAuthor");

                    b.Navigation("StoryFavorite");

                    b.Navigation("StoryNotifications");

                    b.Navigation("StoryPublish");

                    b.Navigation("StoryReview");

                    b.Navigation("UserLoggin");
                });
#pragma warning restore 612, 618
        }
    }
}
