// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuonRoiSocialNetwork.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MuonRoiSocialNetwork.Migrations
{
    [DbContext(typeof(MuonRoiSocialNetworkDbContext))]
    [Migration("20231026024525_updateMaxLengthBodyChapter")]
    partial class updateMaxLengthBodyChapter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MuonRoi.Social_Network.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Guid", "NameCategory");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Chapters.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("chapter_title");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<long>("NumberOfChapter")
                        .HasColumnType("bigint")
                        .HasColumnName("number_of_chapter");

                    b.Property<int>("NumberOfWord")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_word");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("story_id");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("ChapterTitle", "NumberOfChapter", "Id", "Guid");

                    b.ToTable("chapter", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Roles.GroupUserMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roles");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("groupusermember", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.Story", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_name");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<bool>("IsShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_show");

                    b.Property<string>("ListRattings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("list_rattings");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<string>("StorySynopsis")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("story_synopsis");

                    b.Property<string>("StoryTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("story_title");

                    b.Property<int>("TotalChapter")
                        .HasColumnType("integer")
                        .HasColumnName("total_chapter");

                    b.Property<int>("TotalFavorite")
                        .HasColumnType("integer")
                        .HasColumnName("total_favorite");

                    b.Property<int>("TotalView")
                        .HasColumnType("integer")
                        .HasColumnName("total_view");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoryTitle", "AuthorName", "Id", "Guid", "CategoryId");

                    b.ToTable("story", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryNotifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("message");

                    b.Property<int>("NotificationSate")
                        .HasColumnType("integer")
                        .HasColumnName("notification_state");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("notification_type");

                    b.Property<string>("NotificationUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notify_url");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("story_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserGuid");

                    b.ToTable("storynotifications", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryPublish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("story_guid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("storypublish", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("content");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("story_guid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("storyreview", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("details");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tag_name");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("TagName", "Id", "Guid");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.TagInStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("story_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("TagId");

                    b.ToTable("taginstory", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer")
                        .HasColumnName("account_status");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<int>("CountRequestSendMail")
                        .HasColumnType("integer")
                        .HasColumnName("count_request_sendmail");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date");

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Email")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastLoginLocation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("last_login_location");

                    b.Property<string>("LockReason")
                        .HasColumnType("text")
                        .HasColumnName("lock_reason");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Salt")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("salf");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserName", "Id");

                    b.ToTable("appuser");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.BookmarkStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BookmarkDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bookmark_date");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("story_guid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("bookmarkstory", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.FollowingAuthor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<Guid>("StoryGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("story_guid");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id");

                    b.HasIndex("UserGuid");

                    b.ToTable("followingauthor", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Groups.AppRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.ToTable("approle", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Storys.StoryFavorite", b =>
                {
                    b.Property<long>("StoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("story_id");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.HasKey("StoryId", "UserGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("storyfavorite", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Users.Language", b =>
                {
                    b.Property<int>("LanguageName")
                        .HasColumnType("integer")
                        .HasColumnName("lang");

                    b.HasKey("LanguageName");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CreatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("created_date_ts")
                        .HasColumnOrder(107);

                    b.Property<Guid?>("CreatedUserGuid")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("created_user_guid")
                        .HasColumnOrder(101);

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_username")
                        .HasColumnOrder(104);

                    b.Property<double?>("DeletedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("deleted_date_ts")
                        .HasColumnOrder(109);

                    b.Property<Guid?>("DeletedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_user_guid")
                        .HasColumnOrder(103);

                    b.Property<string>("DeletedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_username")
                        .HasColumnOrder(106);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(110);

                    b.Property<string>("KeySalt")
                        .HasColumnType("text")
                        .HasColumnName("key_salf");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<double?>("RefreshTokenExpiryTimeTS")
                        .HasColumnType("double precision")
                        .HasColumnName("refreshtoken_expirytime_ts");

                    b.Property<double?>("UpdatedDateTS")
                        .HasColumnType("double precision")
                        .HasColumnName("updated_date_ts")
                        .HasColumnOrder(108);

                    b.Property<Guid?>("UpdatedUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user_guid")
                        .HasColumnOrder(102);

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_username")
                        .HasColumnOrder(105);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("userlogin", (string)null);
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Chapters.Chapter", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.Story", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Categories.Category", "Category")
                        .WithMany("Storys")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryNotifications", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("StoryNotifications")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryNotifications")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryPublish", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryPublish")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.StoryReview", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("StoryReview")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.TagInStory", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("TagInStory")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuonRoi.Social_Network.Tags.Tag", "Tag")
                        .WithMany("TagInStory")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.AppUser", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Roles.GroupUserMember", "GroupUserMember")
                        .WithMany("UserMember")
                        .HasForeignKey("GroupId");

                    b.Navigation("GroupUserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.BookmarkStory", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("BookMarkStory")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.FollowingAuthor", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "UserMember")
                        .WithMany("FollowingAuthor")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Storys.StoryFavorite", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Storys.Story", "Story")
                        .WithMany("StoryFavorite")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "AppUser")
                        .WithMany("StoryFavorite")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("MuonRoiSocialNetwork.Domains.DomainObjects.Users.UserLogin", b =>
                {
                    b.HasOne("MuonRoi.Social_Network.Users.AppUser", "AppUser")
                        .WithOne("UserLoggin")
                        .HasForeignKey("MuonRoiSocialNetwork.Domains.DomainObjects.Users.UserLogin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Categories.Category", b =>
                {
                    b.Navigation("Storys");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Roles.GroupUserMember", b =>
                {
                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Storys.Story", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("StoryFavorite");

                    b.Navigation("StoryNotifications");

                    b.Navigation("TagInStory");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Tags.Tag", b =>
                {
                    b.Navigation("TagInStory");
                });

            modelBuilder.Entity("MuonRoi.Social_Network.Users.AppUser", b =>
                {
                    b.Navigation("BookMarkStory");

                    b.Navigation("FollowingAuthor");

                    b.Navigation("StoryFavorite");

                    b.Navigation("StoryNotifications");

                    b.Navigation("StoryPublish");

                    b.Navigation("StoryReview");

                    b.Navigation("UserLoggin");
                });
#pragma warning restore 612, 618
        }
    }
}
